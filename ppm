#!/bin/bash

readonly dotFile=~/.bashrc
readonly _pwd=`pwd`
readonly _dirname=`dirname $0`
source $_dirname/binz/colorsh &>/dev/null  

readonly _config=${_dirname}/ppm.conf

read -d "" rcTemplate << EOS
# Project name
  name=

# Project repositories
  primary=
  secondary=
  tertiary=

# Project submodules
EOS

# Associative arrays are iterated out-of-order.  Hence - two arrays.
readonly -a rcFields=(
  "name"
  "primary"
  "secondary"
  "tertiary"
)
readonly -a fieldDescriptions=(
  "Project Name"
  "Primary"
  "Secondary"
  "Tertiary"
)

function get()
{
  echo `grep -oP "(?<=$1=).*$" $2`  
}

function clean()
{
  git remote remove origin &>/dev/null || true
}

function install()
{
  installSubmodules
  installRemotes  
}

function installSubmodules()
{
  printf "${green}Installing any submodules -\n"
  submodules=$(grep -A 10 "^# Project submodules\s*$" .ppmrc | 
    grep -P "^[^#]" | 
    sed "s/\s*//")

  add $submodules
}

function installRemotes()
{
  clean
  printf ${lightGreen}
  if git remote add origin $(get primary .ppmrc); then
    printf "\n${lightGreen}Set fetch URL `get primary .ppmrc`\n${reset}"
  fi
  for remote in primary secondary tertiary quaternary; do
    if [[ -n `get $remote .ppmrc` ]] && git remote set-url --add --push origin $(get $remote .ppmrc); then
      printf "${lightGreen}Set push URL `get $remote .ppmrc`\n" 
    fi
  done
  printf "\n"
}

function path()
{
  
  # There's a bug with this regex in that it won't match the second of two consecutive 
  #   entries of $_pwd in PATH 
  pathAppend="! { echo \$PATH | grep -Pq \"(^|:)${_pwd}($|:)\"; } && export PATH+=:$_pwd"

  if grep "^${pathAppend}$" $dotFile &>/dev/null; then
    printf "${yellow}$_pwd already added to PATH permanently in $dotFile"
  elif echo $pathAppend >> $dotFile; then
    printf "${green}$_pwd added to PATH permanently in $dotFile\n"
    exec /bin/bash
  else
    printf "${red}There was an error adding $_pwd to PATH in $dotFile"
  fi
  printf "${reset}\n"
}

# Add a new dependency (git submodule)
function add()
{
  if [[ $1 == "-d" ]]; then
    default=`get primary $_config`
    shift 1
  fi
  for i in $@; do
    repo=${default}${i}.git
    git submodule add $repo
    git submodule update --init --recursive

    # cd into each submodule and install their git remotes
    (cd $(echo $repo | grep -oP "\w*(?=\.git)") && installRemotes)
    # only add the submodule to the ppmrc if it hasn't already been added
    if ! grep $repo .ppmrc &>/dev/null; then printf "  $repo\n" >> .ppmrc; fi;
  done
}

# Initialize a directory as a new git project
function init()
{
  printf "**********************************\n"
  printf "***  ${lightBlue}Phreedom Package Manager${reset}  *** ...by papiro\n"
  printf "**** ${blue}- \"Reinvent the wheel.\"${reset} *****\n\n"

  if [[ -e .ppmrc ]]; then
    printf "${yellow}Already initialized .ppmrc\n\n"
    exit 1
  fi

  if [[ $1 == "-d" ]]; then
    if [[ -e $_config ]]; then
      for i in ${rcFields[@]}; do
        case $i in
          name)
            if [[ -n $2 ]]; then
              name=$2
            else
              printf "${reset}${fieldDescriptions[name]}: ${lightYellow}"
              read name
            fi
            val=$name
            ;;
          *)
            val=`get $i $_config`${name}.git
            ;;
        esac
        rcTemplate=${rcTemplate//$i=/$i=$val}
      done
    else
      printf "${red}No ppm.conf found in $_config directory${reset}"
      exit 1
    fi
  else
    for i in ${!rcFields[@]}; do
      field=${rcFields[$i]}
      while true; do
        printf "${reset}${fieldDescriptions[$i]}: ${lightYellow}"
        read ${field}
        if [[ -n ${!field} ]]; then
          rcTemplate=${rcTemplate//${field}=/${field}=${!field}}
          break
        fi
      done
    done
  fi

  # reset color
  printf "${reset}"
  ###

  printf "${rcTemplate}\n" > .ppmrc && printf "${lightGreen}.ppmrc created\n\n"
  git init
  installRemotes
}

function config () {
  cat $_config
  echo $_config
}

function -h()
{
  cat <<EOT
Usage: ppm [command] [option(s)] [argument]

Commands:
  init              initialize a .ppmrc
  install           will run "installSubmodules" and "installRemotes"
  installSubmodules installs submodules of submodules (dependencies of dependencies)
  installRemotes    use the URLs defined in the .ppmrc to set up the fetch/push git remotes
  add               add, initialize, and update a git submodule for the current project
  path              add the current directory to the PATH permanently by writing an export statement to the ~/.bashrc
  clean             remove git remotes fetch/push URLs named "origin"
  config            view the config currently in use

  -h      display usage instructions
  -v      display the last tagged version
  -d      use default template in ppm.conf (use with 'init' or 'add' commands)


${BGblue}${lightYellow}   Primary, Secondary, and Tertiary are the Git repo URL's you will use to version-control/backup your project.${fillLine}
${fillLine}
  git@<domain:username><project-name>.git <-- Make sure to enter the full identifier, and that the repos already exist.  PPM will not create the repos for you.${fillLine}
${fillLine} 
  To create a local repo: ${bold}git init --bare /var/backups/<project-name>.git${unbold}.${fillLine}
${fillLine}
  If ${bold}ppm${unbold} is run with an argument other than a listed command or flag, then ppm will look for a script in your project directory with that name and execute it.  This is cool because it allows you to give your local scripts any names they want and not have them collide with environment program names or builtins.  For example, you may have a script in your project's root called "ls" and you may execute it by running ${bold}ppm ls${unbold}.${fillLine}${reset}
EOT
  printf "${reset}"
}

function -v()
{
  ( cd $_dirname $>/dev/null && git tag | tail -1 )
}

if [[ -z $1 ]]; then
  printf "Commands: \n"
  printf "${lightGreen}"
  printf "1. init\n"
  printf "2. install\n"
  printf "3. installSubmodules\n"
  printf "4. installRemotes\n"
  printf "5. add\n"
  printf "6. path\n"
  printf "7. clean\n"
  printf "8. config\n"
fi

if [[ ${1:0:1} == "-" || `type -t $1` == "function" ]]; then
  `${!1}` $@
elif [ -z $1 ]; then
  exit 0
else
  $_pwd/$1  
fi
